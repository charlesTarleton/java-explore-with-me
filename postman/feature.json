{
	"info": {
		"_postman_id": "1750c36b-ece8-4bad-8e8b-e38e80e68a6a",
		"name": "Explore With Me - Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27176210"
	},
	"item": [
		{
			"name": "Validation",
			"item": [
				{
					"name": "Добавление комментария к несуществующему событию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    try {\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        comment = rnd.getComment(10000);\r",
									"        pm.collectionVariables.set('userId', author.id)\r",
									"\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(comment),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"}\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"    \r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария другим пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const comment1 = await api.addComment(author.id, rnd.getComment(event.id));\r",
									"        const comment2 = rnd.getUpdateComment();\r",
									"        pm.collectionVariables.set('userId', initiator.id)\r",
									"        pm.collectionVariables.set('commentId', comment1.id)\r",
									"        pm.collectionVariables.set('oldComment', comment1);\r",
									"        pm.collectionVariables.set('newComment', comment2);\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(comment2),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"}\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "commentId",
									"value": "{{commentId}}",
									"description": "(Required) id обновляемого комментария"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария другим пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const comment = await api.addComment(author.id, rnd.getComment(event.id));\r",
									"        pm.collectionVariables.set('userId', initiator.id)\r",
									"        pm.collectionVariables.set('commentId', comment.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"}\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "commentId",
									"value": "{{commentId}}",
									"description": "(Required) id удаляемого комментария"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария к неопубликованному событию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        comment = rnd.getComment(event.id);\r",
									"        pm.collectionVariables.set('userId', author.id)\r",
									"\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(comment),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"}\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"    \r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление пустого комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        let comment = rnd.getComment(event.id);\r",
									"        comment.text = \"\";\r",
									"        pm.collectionVariables.set('userId', author.id)\r",
									"\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(comment),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"}\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"    \r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "Добавление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set('userId', author.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        let comment = rnd.getComment(event.id);\r",
									"\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(comment),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"}\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"    \r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const param = pm.collectionVariables.get('userId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, text, author, eventId, edited\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('edited');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Комментарий к событию должен соответствовать комментарию к событию в запросе');\r",
									"    pm.expect(target.author.id).equal(param, 'Автор комментария к событию должен соответствовать автору комментария к событию в запросе');\r",
									"    pm.expect(target.eventId).equal(source.eventId, 'Комментируемое событие должно соответствовать комментируемому событию в запросе');\r",
									"    pm.expect(target.edited).equal(false, 'Новый комментарий не должен иметь флага отредактированного');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set('userId', author.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const comment = await api.addComment(author.id, rnd.getComment(event.id));\r",
									"        pm.collectionVariables.set('commentId', comment.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"}\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"source = pm.collectionVariables.get('response');\r",
									"commentId = pm.collectionVariables.get('commentId');\r",
									"\r",
									"pm.test(\"Комментарий должен быть найден до удаления\", function () {\r",
									"    pm.expect(source).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/users/\" + pm.collectionVariables.get('userId') + \"/comments/\" + commentId,\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Комментарий не должен быть найден после удаления\", function () {\r",
									"                pm.expect(response.code).to.eql(404);\r",
									"            });\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "commentId",
									"value": "{{commentId}}",
									"description": "(Required) id удаляемого комментария"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const comment1 = await api.addComment(author.id, rnd.getComment(event.id));\r",
									"        const comment2 = rnd.getUpdateComment();\r",
									"        pm.collectionVariables.set('userId', author.id);\r",
									"        pm.collectionVariables.set('commentId', comment1.id);\r",
									"        pm.collectionVariables.set('oldComment', comment1);\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(comment2),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"}\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const oldComment = pm.collectionVariables.get('oldComment');\r",
									"const newComment = pm.collectionVariables.get('newComment');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, text, author, eventId, edited\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('edited');\r",
									"});\r",
									"\r",
									"pm.test(\"ID в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).equal(oldComment.id, 'Идентификатор комментария к событию должен соответствовать изначальному идентификатору комментария к событию');\r",
									"});\r",
									"pm.test(\"text в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.text).equal(newComment.text, 'Комментарий к событию должен соответствовать комментарию к событию в запросе');\r",
									"});\r",
									"pm.test(\"author.id в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.author.id).equal(oldComment.author.id, 'Автор комментария к событию должен соответствовать изначальному автору комментария к событию в запросе');\r",
									"});\r",
									"pm.test(\"eventId в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.eventId).equal(oldComment.eventId, 'Комментируемое событие должно соответствовать изначальному комментируемому событию в запросе');\r",
									"});\r",
									"pm.test(\"edited в ответе должны соответствовать данным в запросе\", function () {\r",
									"     pm.expect(target.edited).equal(true, 'Измененный комментарий должен иметь флаг отредактированного');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "commentId",
									"value": "{{commentId}}",
									"description": "(Required) id обновляемого комментария"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментария по id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const comment = await api.addComment(author.id, rnd.getComment(event.id));\r",
									"        pm.collectionVariables.set('userId', author.id)\r",
									"        pm.collectionVariables.set('commentId', comment.id)\r",
									"        pm.collectionVariables.set('newComment', comment)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"}\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"    \r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const source = pm.collectionVariables.get('newComment');\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, text, author, eventId, edited\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('edited');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Комментарий к событию должен соответствовать ранее добавленному комментарию к событию');\r",
									"    pm.expect(target.author.id).equal(source.author.id, 'Автор комментария к событию должен соответствовать ранее добавленному автору комментария к событию в запросе');\r",
									"    pm.expect(target.eventId).equal(source.eventId, 'Комментируемое событие должно соответствовать ранее добавленному комментируемому событию в запросе');\r",
									"    pm.expect(target.edited).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "commentId",
									"value": "{{commentId}}",
									"description": "(Required) id получаемого комментария"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев пользователя по id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const comment1 = await api.addComment(author.id, rnd.getComment(event.id));\r",
									"        pm.collectionVariables.set('oldComment', comment1)\r",
									"        const comment2 = await api.addComment(author.id, rnd.getComment(event.id));\r",
									"        pm.collectionVariables.set('newComment', comment2)\r",
									"        pm.collectionVariables.set('userId', author.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"}\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"    \r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"const comment1 = pm.collectionVariables.get('oldComment');\r",
									"const comment2 = pm.collectionVariables.get('newComment');\r",
									"const target1 = pm.response.json()[0];\r",
									"const target2 = pm.response.json()[1];\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, text, author, eventId, edited\", function () {\r",
									"    pm.expect(target1).to.contain.keys('id', 'text', 'author', 'eventId', 'edited');\r",
									"    pm.expect(target2).to.contain.keys('id', 'text', 'author', 'eventId', 'edited');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target1.id).to.not.be.null;\r",
									"    pm.expect(target1.text).equal(comment1.text, 'Комментарий к событию должен соответствовать ранее добавленному комментарию к событию');\r",
									"    pm.expect(target1.author.id).equal(comment1.author.id, 'Автор комментария к событию должен соответствовать ранее добавленному автору комментария к событию в запросе');\r",
									"    pm.expect(target1.eventId).equal(comment1.eventId, 'Комментируемое событие должно соответствовать ранее добавленному комментируемому событию в запросе');\r",
									"    pm.expect(target1.edited).to.not.be.null;\r",
									"    \r",
									"    pm.expect(target2.id).to.not.be.null;\r",
									"    pm.expect(target2.text).equal(comment2.text, 'Комментарий к событию должен соответствовать ранее добавленному комментарию к событию');\r",
									"    pm.expect(target2.author.id).equal(comment2.author.id, 'Автор комментария к событию должен соответствовать ранее добавленному автору комментария к событию в запросе');\r",
									"    pm.expect(target2.eventId).equal(comment2.eventId, 'Комментируемое событие должно соответствовать ранее добавленному комментируемому событию в запросе');\r",
									"    pm.expect(target2.edited).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								""
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение события с комментарием",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const comment = await api.addComment(author.id, rnd.getComment(event.id));\r",
									"        pm.collectionVariables.set('newComment', comment)\r",
									"        pm.collectionVariables.set('userId', initiator.id)\r",
									"        pm.collectionVariables.set('eventId', event.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"}\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"    \r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поле comments\", function () {\r",
									"pm.expect(target).to.have.property('comments');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).not.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}",
									"description": "(Required) id запрашиваемого события"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch(\"/admin/events/\" + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    async addComment(userId, comment, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/comments\", comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"    }",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"}",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getComment(eventId) {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventId: eventId,",
					"        };",
					"    }",
					"",
					"    getUpdateComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"        };",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "userId",
			"value": "1"
		},
		{
			"key": "eventId",
			"value": "1"
		},
		{
			"key": "commentId",
			"value": "1"
		},
		{
			"key": "request_body",
			"value": "",
			"type": "string"
		},
		{
			"key": "oldComment",
			"value": "",
			"type": "string"
		},
		{
			"key": "newComment",
			"value": "",
			"type": "string"
		}
	]
}